def default():
    print("\nwelcome! lets play TIC TAC TOE!\n")


def rules():
    print("the board will look like this!")
    print("The positions of this 3 x 3 board is same as the right side of your key board.\n")
    print(" 7 | 8 | 9")
    print("-----------")
    print(" 4 | 5 | 6")
    print("-----------")
    print(" 1 | 2 | 3")
    print("\nyou just have to input the position(1-9")


def play():
    return input("\nAre you ready to play the game? Enter [Y]es or [N]o.\t").upper().startswith('Y')


def names():
    p1_name = input("\nEnter NAME of PLAYER 1:\t").capitalize()
    p2_name = input("Enter NAME of PLAYER 2:\t").capitalize()
    return p1_name, p2_name


def choice():
    p1_choice = ' '
    p2_choice = ' '
    while p1_choice != 'X' or p1_choice != '0':

        p1_choice = input(f"\n{p1_name}, do you want to be X or O?\t")[0].upper()

        if p1_choice == 'X' or p1_choice == 'O':
            break
    print("INVALID INPUT! Please Try Again!")
    if p1_choice == 'X':
        p2_choice = 'O'
    elif p1_choice == 'O':
        p2_choice = 'X'
    return p1_choice, p2_choice


def first_player():
    import random
    return random.choice((0, 1))


def display_board(board, avail):
    print("   " + " {} | {} | {} ".format(board[7], board[8], board[9]) + "             " + " {} | {} | {} ".format(
        avail[7], avail[8], avail[9]))
    print("    " + "-----------" + "             " + "-----------")
    print("   " + " {} | {} | {} ".format(board[4], board[5], board[6]) + "             " + " {} | {} | {} ".format(
        avail[4], avail[5], avail[6]))
    print("    " + "-----------" + "             " + "-----------")
    print("   " + " {} | {} | {} ".format(board[1], board[2], board[3]) + "             " + " {} | {} | {} ".format(
        avail[1], avail[2], avail[3]))


def CompAI(board, name, choice):
    position = 0
    possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]

    for let in ['O', 'X']:
        for i in possibilities:
            boardCopy = board[:]
            boardCopy[i] = let
            if (win_check(boardCopy, let)):
                position = i
                return position

    openCorners = [x for x in possibilities if x in [1, 3, 7, 9]]


            if len(openCorners) > 0:
                position = selectRandom(openCorners)
                return position

            if 5 in possibilities:
                position = 5
                return position

            openEdges = [x for x in possibilities if x in [2, 4, 6 ,8]]

            if len(openEdges) > 0:
                position = selectRandom(openEdges)
                return position


def selectRandom(board, ln):
    import random
    r = len(board)
    r = random.randrange(0, ln)
    return board[r]


def place_marker(board, avail, choice, position):
    board[position] = choice
    avail[position] = ' '


    def space_check(board, position):
         return board[position] == ' '


    def full_board_check(board):
        for i in range(1, 10)
            if space_check(board, i):
                return False

        return False

